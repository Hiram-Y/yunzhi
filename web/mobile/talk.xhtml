<?xml version='1.0' encoding='UTF-8' ?>  
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">  
<html xmlns="http://www.w3.org/1999/xhtml"  
      xmlns:h="http://java.sun.com/jsf/html"  
      xmlns:f="http://java.sun.com/jsf/core"  
      xmlns:pm="http://primefaces.org/mobile"
      xmlns:p="http://primefaces.org/ui"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets">  
    <f:view renderKitId="PRIMEFACES_MOBILE" />
    <h:head>  
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.8/css/all.css" integrity="sha384-3AB7yXWz4OeoZcPbieVW64vVXEwADiYyAEhwilzWsLw+9FgqpyjjStpPnpBO8o8S" crossorigin="anonymous"/>
        <style>
            .myContent{
                padding: 0em 0em !important;
            }
        </style>
        <script type="text/javascript">

//<![CDATA[
            //保证js中可以使用&和<符号，能正确取得url的值
            var websocket = null;
            var userId = getQueryVariable("userId");
            var talkTo = getQueryVariable("talkTo");
            if (userId === null || talkTo === null) {
                alert("没有直播间数据，请重新进入");
            } else {
                if ('WebSocket' in window) {
                    //判断当前浏览器是否支持WebSocket  
                    websocket = new WebSocket("ws://10.206.11.101:8080/yunzhi/talkSocket/" + userId + "/" + talkTo);
                } else {
                    alert('您的浏览器不支持 websocket！');
                }
            }

            if (websocket !== null) {
                //连接发生错误的回调方法  
                websocket.onerror = function () {
                    setMessageInnerHTML("error");
                };

//连接成功建立的回调方法  
                websocket.onopen = function (event) {
                    var text = "链接成功!正在和" + talkId + "会话";
                    setMessageInnerHTML(text);
                }

                //接收到消息的回调方法  
                websocket.onmessage = function (event) {
                    setMessageInnerHTML(event.data);
                }

                //连接关闭的回调方法  
                websocket.onclose = function () {
                }
            }

//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。  
            window.onbeforeunload = function () {
                if (websocket !== null) {
                    websocket.close();
                }
            }


//将消息显示在网页上  
            function setMessageInnerHTML(text) {
                var innerHTML = handleJsonMessage(text);
                document.getElementById('message').innerHTML += innerHTML;
                msg_end.scrollIntoView();
            }

//关闭连接  
            function closeWebSocket() {
                if (websocket !== null) {
                    websocket.close();
                }
            }

            //发送消息  
            function send() {
                var msg = document.getElementById('inputText').value;
                var myJson = {
                    "type": "message",
                    "body": [
                        {"dateTime": getNowFormatDate(), "whoSpeak": "#{talkContrller.userUserId.name}", "msg": msg}
                    ]
                }
                var text = JSON.stringify(myJson);
                if (websocket !== null) {
                    websocket.send(text);
                    setMessageInnerHTML(text);
                    document.getElementById('inputText').value = "";
                }
            }

            function getNowFormatDate() {
                var myDate = new Date();
                return myDate.toJSON(); //获取日期与时间
            }

            function getQueryVariable(variable)
            {
                var query = window.location.search.substring(1);
                var vars = query.split("&");
                for (var i = 0; i < vars.length; i++) {
                    var pair = vars[i].split("=");
                    if (pair[0] === variable) {
                        return pair[1];
                    }
                }
                return(false);
            }

            function handleJsonMessage(message) {
                var msg = JSON.parse(message);
                var text = "";
                if (msg.type === "message") {
                    for (var i = 0; i < msg.body.length; i++) {
                        var item = "[" + msg.body[i].dateTime + "]<br/>" + msg.body[i].whoSpeak + ":" + msg.body[i].msg;
                        text += item + '<br/>';
                    }
                }
                if (text.length > 0) {
                    return text;
                } else {
                    return "";
                }
            }

//]]>
        </script> 
        <f:metadata>
            <f:viewParam name="userId" value="#{talkContrller.userId}" />
            <f:viewParam name="talkTo" value="#{talkContrller.talkTo}" />
            <f:viewParam name="back" value="#{talkContrller.back}" />
            <f:viewAction action="#{talkContrller.initData()}"/>
        </f:metadata>
    </h:head>  
    <h:body>    
        <pm:page id="secondPage" >
            <pm:header  title="#{talkContrller.userTalkTo.name}">
                <p:button styleClass="ui-btn-left ui-btn-inline" value="back" icon="ui-icon-arrow-l" outcome="#{talkContrller.back}" />
            </pm:header>
            <pm:content >
                <h:form>
                    <p:scrollPanel  id="msgPanel" class=" ui-input-text ui-shadow-inset ui-body-inherit ui-corner-all ui-focus" mode="native" style="height:300px" >
                        <div id="message" />
                        <div id="msg_end" style="height:0px;"></div>
                    </p:scrollPanel>
                    <p:panelGrid columns="2" styleClass="ui-responsive">
                        <input id="inputText"  maxlength="50"  /> 
                        <p:commandButton value="发送" icon="fa fa-send"  onclick="send()" type="button"  />
                    </p:panelGrid>
                </h:form>            
            </pm:content>
        </pm:page>
    </h:body>  
</html>  

